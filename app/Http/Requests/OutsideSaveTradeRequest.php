<?php

namespace App\Http\Requests;

use App\Exceptions\ApiException;
use App\Http\Response\ApiResponse;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Contracts\Validation\Validator;

class OutsideSaveTradeRequest extends FormRequest
{
    use ApiResponse;
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {//dd($this->all());
        /* 场外市场挂单入库
     * @param Request $request
     * param：
     *     user_id:用户id；
     *     trade_des：广告留言；
     *     trade_type：挂单的交易类型，买单或者卖单， 0表示出售虚拟币,1表示购买虚拟币,
     *     coin_id：虚拟货币类型id；
     *     location_id：国家地区的id；
     *     currency_id：货币id；
     *     get_money_type：交易方式（支付宝或者微信私下交易）
     *     trade_number：试图出售或者买进的币种数量；
     *     trade_price：定价交易或者溢价交易；
     *     trade_ideality_price：愿意买卖交易最高或者最低价
     *     trade_min_limit_price：最低交易额；
     *     trade_max_limit_price：最高交易额；
     *     trade_premium_rate：如果trade_price_type为2，设置的溢价比
     *     trade_limit_time：交易时间限额,以时间戳记录；
     *     trade_with_trust：买卖单是否只对标识了受信任的人进行交易或者可见,0代表不，1代表是；
     *     trade_with_confirm：买卖单是否只对进行了身份验证的人进行交易或者可见,0代表不，1代表是；
     *     trade_is_visual：根据trade_visual_time判断是否可见,当type为1时则一直可见,为2时则根据date判断,使用脚本判断，0代表不可见，1代表可见；
     *     trade_price_type：挂单定价方式，1代表自定义价格,2代表溢价；
     *     trade_visual_time：订单可见日期,序列化存储，0,1,2,3,4,5,6,trade_is_visual为1代表所有时间可见，为2代表在date指定时间内可见；
     *    @return \Illuminate\Http\JsonResponse
     */
        return [
            'user_id' => 'required|integer',
            'coin_id' => 'required|integer',
            'location_id' => 'required|integer',
            'currency_id' => 'required|integer',
            'trade_des' => 'required|string',
            'get_money_type' => 'required',
            'trade_number' => 'required|numeric',
            'trade_price' => 'required|numeric',
            //'trade_ideality_price' => 'required|numeric',
            'trade_min_limit_price' => 'required|numeric',
            'trade_max_limit_price' => 'required|numeric',
            'trade_price_type' => 'required|in:1,2',
            'trade_premium_rate' => 'required|numeric',
            //'trade_limit_time' => 'required|numeric',
            'trade_type' => 'required|in:0,1',
            'trade_with_trust' => 'required|in:0,1',
//            'trade_with_confirm' => 'required|in:0,1',
            'trade_is_visual' => 'required|in:0,1',

//            'trade_visual_time' => 'required|string',弃用
        ];
    }

    public function messages()
    {
        return [
            'required'   => '缺少必要字段:attribute.',
            'min'        => ':attribute字段的值不能低于:min',
            'image'      => ':attribute字段的值必须是图片',
            'alpha_dash' => ':attribute验证字段值是否仅包含字母、数字、破折号（ - ）以及下划线（ _ ）',
            'integer'    => ':attribute字段值必须是整数',
            'string'     => ':attribute字段值必须是字符串',
            'present'    => ':attribute字段必须出现，并且数据可以为空',
            'email'      => ':attribute字段格式不正确',
            'max'		=>':attribute字段的值不能高于:max',
            'size'		=>':attribute字段需要18位长度',
            'digits'		=>':attribute格式有错',
            'alpha'		=>':attribute必须是字符',
            'in'		=>':attribute不在范围内',
            'mimes'		=>'上传文件类型不符合要求',
            'regex' => ':attribute 不合规范'
        ];
        //return parent::messages(); // TODO: Change the autogenerated stub
    }


    protected function failedValidation(Validator $validator)
    {//dd($validator->getMessageBag());
        foreach ($validator->getMessageBag()->getMessages() as $key=>$value){
            $message = $value[0];
        }

        throw new ApiException('参数错误' . $message,1004);
    }


}
